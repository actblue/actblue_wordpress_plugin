version: 2.1

references:
  # Environment variables.

  WP_CORE_DIR: &WP_CORE_DIR /tmp/wordpress
  WP_HOST: &WP_HOST actblue.test
  WP_PLUGIN_NAME: &WP_PLUGIN_NAME actblue-contributions
  WP_ORG_USERNAME: &WP_ORG_USERNAME actblue
  WP_TESTS_DIR: &WP_TESTS_DIR /tmp/wordpress-tests-lib

  # Container configuration.
  container_config: &container_config
    docker:
      - image: circleci/php:7.2-node-browsers
    environment:
      - WP_CORE_DIR: *WP_CORE_DIR
      - WP_PLUGIN_NAME: *WP_PLUGIN_NAME
      - WP_HOST: *WP_HOST
      - WP_ORG_USERNAME: *WP_ORG_USERNAME
      - WP_TESTS_DIR: *WP_TESTS_DIR
    working_directory: ~/actblue-contributions

  workspace_root: &workspace_root
    /tmp

  install_tools: &install_tools
    run:
      name: Install tools
      command: sudo apt-get update && sudo apt-get install subversion rsync

  attach: &attach
    attach_workspace:
      at: *workspace_root

jobs:
  build:
    <<: *container_config
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd $WP_PLUGIN_NAME
            composer install -n -o
            npm install
      - run:
          name: Build
          command: cd $WP_PLUGIN_NAME && npm run build
      - persist_to_workspace:
          root: .
          paths:
            - actblue-contributions/build
            - actblue-contributions/vendor

  code_quality:
    <<: *container_config
    steps:
      - checkout
      - *attach
      - run:
          name: Copy vendor directory
          command: cp -R /tmp/$WP_PLUGIN_NAME/vendor $WP_PLUGIN_NAME
      - run:
          name: Run code quality tests
          command: cd $WP_PLUGIN_NAME && vendor/bin/phpcs

  unit_tests:
    <<: *container_config
    docker:
      - image: circleci/php:7.2
      - image: circleci/mysql:5.7
    steps:
      - checkout
      - *install_tools
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update && sudo apt-get install default-mysql-client
            sudo docker-php-ext-install mysqli
            composer global require "phpunit/phpunit ^5"
      - run:
          name: Run unit tests
          command: |
            rm -rf $WP_TESTS_DIR $WP_CORE_DIR
            bash $WP_PLUGIN_NAME/bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1 latest
            cd $WP_PLUGIN_NAME && $HOME/.composer/vendor/bin/phpunit

  e2e_tests:
    <<: *container_config
    docker:
      - image: circleci/php:7.2-node
      - image: circleci/mysql:5.7
    steps:
      - checkout
      - run:
          name: Add WordPress host to hosts file
          command: echo "127.0.0.1 ${WP_HOST}" | sudo tee -a /etc/hosts
      - run:
          name: Install Headless Chrome dependencies
          command: |
            sudo apt-get update && sudo apt-get install -yq \
            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 \
            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 \
            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates \
            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget libgbm-dev
      - run:
          name: Install puppeteer with chronium
          command: npm install puppeteer
      - run:
          name: Install wp-cli
          command: |
            curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            chmod +x wp-cli.phar
            sudo mv wp-cli.phar /usr/local/bin/wp
      - *attach
      - run:
          name: Copy assets
          command: |
            cp -R /tmp/$WP_PLUGIN_NAME/vendor $WP_PLUGIN_NAME
            cp -R /tmp/$WP_PLUGIN_NAME/build $WP_PLUGIN_NAME
      - run:
          name: Install MySQL client
          command: sudo apt-get update && sudo apt-get install default-mysql-client
      - run:
          name: Install MySQL PHP extension
          command: sudo docker-php-ext-install mysqli
      - run:
          name: Install WordPress
          command: bash .circleci/install-wordpress.sh
      - run:
          name: Setup WordPress
          command: bash .circleci/setup-wordpress.sh
      - run:
          name: Start PHP server
          command: sudo php -S $WP_HOST:80 -t $WP_CORE_DIR
          background: True
      - run:
          name: Run e2e tests
          command: cd $WP_PLUGIN_NAME && npm run test:e2e -- --wordpress-base-url=http://${WP_HOST}

  deploy_plugin:
    <<: *container_config
    steps:
      - checkout
      - *attach
      - *install_tools
      - run:
          name: Copy built assets
          command: cp -R /tmp/actblue-contributions/build actblue-contributions
      - run:
          name: Deploy assets to WordPress plugin directory
          command: .circleci/deploy-assets.sh
      - run:
          name: Deploy plugin to WordPress plugin directory
          command: .circleci/deploy-plugin.sh

  publish_github_release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - checkout
      - *attach
      - run:
          name: Copy built assets
          command: cp -R /tmp/actblue-contributions/build actblue-contributions
      - run:
          name: "Install archive script dependencies"
          command: |
            apk add --no-cache gnupg rsync
      - run:
          name: "Create ZIP archive"
          command: bash bin/archive.sh
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${CIRCLE_TAG} ./artifacts/

workflows:
  version: 2
  run_tests:
    jobs:
      - build
      - code_quality:
          requires:
            - build
      - unit_tests:
          requires:
            - build
      - e2e_tests:
          requires:
            - build
  deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy_plugin:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - publish_github_release:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
